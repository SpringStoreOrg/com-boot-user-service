# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    environment:
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - run: mkdir -p $CIRCLE_TEST_REPORTS/junit/
      - run: find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;
      - store_test_results:
          path: /tmp/circleci-test-results/junit
      - run:
          name: Analyze on SonarCloud
          command: mvn verify sonar:sonar -Dsonar.projectKey=GeorgeT88_com-boot-user-service
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo $API_TOKEN_IT # this env var must be set within the project    
      - run:
          name: Trigger the IT Build Job
          command: |
            PIPELINE_ID=$(curl --location --request POST 'https://circleci.com/api/v2/project/github/GeorgeT88/com-boot-user-service-it/pipeline' \
            --header 'Content-Type: application/json' \
            --header "Circle-Token: ${API_TOKEN_IT}"  \
            --data-raw '{
                "parameters": {
                    "node-v-1": "10.1.1"
              }
            }' | jq -r '.id')
            echo "export PIPELINE=$PIPELINE_ID" >> $BASH_ENV
      - run: |
            STATUS=$(curl "https://circleci.com/api/v2/pipeline/$PIPELINE/workflow?circle-token=$API_TOKEN_IT" | jq -r '.items[].status')

            while [ "$STATUS" == "running" ]; do
              echo still running
              sleep 10
              STATUS =$(curl -s "https://circleci.com/api/v2/pipeline/$PIPELINE/workflow?circle-token=$API_TOKEN_IT" | jq -r '.items[].status')
            done

            if [["$STATUS" == "success" ]]; then
              echo "Proceeding with build, as triggered pipeline was success"
              exit 0
            else
            echo "Stopping build, triggered pipeline was not a success"
            exit 1
            fi    

workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test 